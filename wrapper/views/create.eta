<html><script type="text/javascript" src="chrome-extension://mdnleldcmiljblolnjhpnblkcekpdkpa/libs/customElements.js" class="__REQUESTLY__SCRIPT"></script><head>
		<meta charset="UTF-8">
		<link rel="icon" href="/favicon.ico" type="image/png">
		<title>Create - Wrapper: Offline</title>
		<meta name="description" content="FreeAnimate's create page">
		<link rel="stylesheet" type="text/css" href="/pages/css/global.css">
		<link rel="stylesheet" type="text/css" href="/pages/css/create.css">
		<script src="/pages/js/jquery.js"></script><script>/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ../core/dist/flash-identifiers.js
const FLASH_MIMETYPE = "application/x-shockwave-flash";
const FUTURESPLASH_MIMETYPE = "application/futuresplash";
const FLASH7_AND_8_MIMETYPE = "application/x-shockwave-flash2-preview";
const FLASH_MOVIE_MIMETYPE = "application/vnd.adobe.flash.movie";
const FLASH_ACTIVEX_CLASSID = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";

;// CONCATENATED MODULE: ../core/dist/plugin-polyfill.js

/**
 * Replacement object for `MimeTypeArray` that lets us install new fake mime
 * types.
 *
 * Unlike plugins we can at least enumerate mime types in Firefox, so we don't
 * lose data.
 *
 * We also expose a method called `install` which adds a new plugin. This is
 * used to falsify Flash detection. If the existing `navigator.mimeTypes` has an
 * `install` method, you should not use `RuffleMimeTypeArray` as some other
 * plugin emulator is already present.
 */
class RuffleMimeTypeArray {
    constructor(mimeTypes) {
        this.__mimeTypes = [];
        this.__namedMimeTypes = {};
        if (mimeTypes) {
            for (let i = 0; i < mimeTypes.length; i++) {
                this.install(mimeTypes[i]);
            }
        }
    }
    /**
     * Install a MIME Type into the array.
     *
     * @param mimeType The mime type to install
     */
    install(mimeType) {
        const index = this.__mimeTypes.length;
        this.__mimeTypes.push(mimeType);
        this.__namedMimeTypes[mimeType.type] = mimeType;
        this[mimeType.type] = mimeType;
        this[index] = mimeType;
    }
    item(index) {
        // This behavior is done to emulate a 32-bit uint,
        // which browsers use.
        return this.__mimeTypes[index >>> 0];
    }
    namedItem(name) {
        return this.__namedMimeTypes[name];
    }
    get length() {
        return this.__mimeTypes.length;
    }
    [Symbol.iterator]() {
        return this.__mimeTypes[Symbol.iterator]();
    }
}
/**
 * Equivalent object to `Plugin` that allows us to falsify plugins.
 */
class RufflePlugin extends RuffleMimeTypeArray {
    constructor(name, description, filename) {
        super();
        this.name = name;
        this.description = description;
        this.filename = filename;
    }
}
/**
 * Replacement object for `PluginArray` that lets us install new fake plugins.
 *
 * This object needs to wrap the native plugin array, since the user might have
 * actual plugins installed. Firefox doesn't let us enumerate the array, though,
 * which has some consequences. Namely, we can't actually perfectly wrap the
 * native plugin array, at least unless there's some secret "unresolved object
 * property name handler" that I've never known before in JS...
 *
 * We can still wrap `namedItem` perfectly at least.
 *
 * We also expose a method called `install` which adds a new plugin. This is
 * used to falsify Flash detection. If the existing `navigator.plugins` has an
 * `install` method, you should not use `RufflePluginArray` as some other plugin
 * emulator is already present.
 */
class RufflePluginArray {
    constructor(plugins) {
        this.__plugins = [];
        this.__namedPlugins = {};
        for (let i = 0; i < plugins.length; i++) {
            this.install(plugins[i]);
        }
    }
    install(plugin) {
        const index = this.__plugins.length;
        this.__plugins.push(plugin);
        this.__namedPlugins[plugin.name] = plugin;
        this[plugin.name] = plugin;
        this[index] = plugin;
    }
    item(index) {
        // This behavior is done to emulate a 32-bit uint,
        // which browsers use. Cloudflare's anti-bot
        // checks rely on this.
        return this.__plugins[index >>> 0];
    }
    namedItem(name) {
        return this.__namedPlugins[name];
    }
    refresh() {
        // Nothing to do, we just need to define the method.
    }
    [Symbol.iterator]() {
        return this.__plugins[Symbol.iterator]();
    }
    get length() {
        return this.__plugins.length;
    }
}
/**
 * A fake plugin designed to trigger Flash detection scripts.
 */
const FLASH_PLUGIN = new RufflePlugin("Shockwave Flash", "Shockwave Flash 32.0 r0", "ruffle.js");
/**
 * A fake plugin designed to allow early detection of if the Ruffle extension is in use.
 */
const RUFFLE_EXTENSION = new RufflePlugin("Ruffle Extension", "Ruffle Extension", "ruffle.js");
FLASH_PLUGIN.install({
    type: FUTURESPLASH_MIMETYPE,
    description: "Shockwave Flash",
    suffixes: "spl",
    enabledPlugin: FLASH_PLUGIN,
});
FLASH_PLUGIN.install({
    type: FLASH_MIMETYPE,
    description: "Shockwave Flash",
    suffixes: "swf",
    enabledPlugin: FLASH_PLUGIN,
});
FLASH_PLUGIN.install({
    type: FLASH7_AND_8_MIMETYPE,
    description: "Shockwave Flash",
    suffixes: "swf",
    enabledPlugin: FLASH_PLUGIN,
});
FLASH_PLUGIN.install({
    type: FLASH_MOVIE_MIMETYPE,
    description: "Shockwave Flash",
    suffixes: "swf",
    enabledPlugin: FLASH_PLUGIN,
});
RUFFLE_EXTENSION.install({
    type: "",
    description: "Ruffle Detection",
    suffixes: "",
    enabledPlugin: RUFFLE_EXTENSION,
});
/**
 * Install a fake plugin such that detectors will see it in `navigator.plugins`.
 *
 * This function takes care to check if the existing implementation of
 * `navigator.plugins` already accepts fake plugin entries. If so, it will use
 * that version of the plugin array. This allows the plugin polyfill to compose
 * across multiple plugin emulators with the first emulator's polyfill winning.
 *
 * @param plugin The plugin to install
 */
function installPlugin(plugin) {
    if (!("install" in navigator.plugins) || !navigator.plugins["install"]) {
        Object.defineProperty(navigator, "plugins", {
            value: new RufflePluginArray(navigator.plugins),
            writable: false,
        });
    }
    const plugins = navigator.plugins;
    plugins.install(plugin);
    if (plugin.length > 0 &&
        (!("install" in navigator.mimeTypes) || !navigator.mimeTypes["install"])) {
        Object.defineProperty(navigator, "mimeTypes", {
            value: new RuffleMimeTypeArray(navigator.mimeTypes),
            writable: false,
        });
    }
    const mimeTypes = navigator.mimeTypes;
    for (let i = 0; i < plugin.length; i += 1) {
        mimeTypes.install(plugin[i]);
    }
}

;// CONCATENATED MODULE: ./src/plugin-polyfill.ts
// This file is compiled and then injected into content.ts's compiled form.

installPlugin(FLASH_PLUGIN);
installPlugin(RUFFLE_EXTENSION);

/******/ })()
;</script><script charset="utf-8" src="chrome-extension://donbcfbmhbcapadipfkeojnmajbakjdc/dist/ruffle.js?id=76843165549"></script>
		<script src="/pages/js/global.js"></script>
	</head>

	<body>
		<header>
	<a href="/">
		<h1 style="margin:0"><img id="logo" src="/pages/img/logo.svg" alt="FreeAnimate"></h1>
	</a>
	<nav id="headbuttons">
		<div class="dropdown_contain btn">
			<div class="dropdown_button upload_button">UPLOAD</div>
			<nav class="dropdown_menu">
				<a onclick="document.getElementById('is-starter').checked = false;document.getElementById('file').click()">Upload as movie</a>
				<a onclick="document.getElementById('is-starter').checked = true;document.getElementById('file').click()">Upload as starter</a>
			</nav>
		</div>	
		<a href="/create?filter=cc" class="btn">CREATE A CHARACTER</a>
		<a href="/create" class="btn btn_primary">MAKE A VIDEO</a>
	</nav>
</header>

<form id="movie-form" class="hide" enctype="multipart/form-data" action="#" method="post">
	<input id="file" type="file" name="import" accept=".zip">
	<input id="is-starter" type="checkbox" value="false">
</form>

		<main>
			<h1>Select a theme</h1>

			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('custom', 'family')">
					<img src="/pages/img/themes/custom.jpg" alt="Comedy World">
					Comedy World
				</a>
			</div>
			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('action', 'cc2')">
					<img src="/pages/img/themes/action.jpg" alt="Lil' Peepz">
					Lil' Peepz
				</a>
			</div>
			
			<div class="theme">
				<a href="#" onclick="redirect('retro')">
					<img src="/pages/img/themes/retro.jpg" alt="Cartoon Classics">
					Cartoon Classics
				</a>
			</div>
			<div class="theme">
				<a href="#" onclick="redirect('politics2')">
					<img src="/pages/img/themes/politics2.jpg" alt="White Houserz">
					White Houserz
				</a>
			</div>
			<div class="theme">
				<a href="#" onclick="redirect('stick')">
					<img src="/pages/img/themes/stick.jpg" alt="Stick Figure">
					Stick Figure
				</a>
			</div>
			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('anime', 'anime')">
					<img src="/pages/img/themes/anime.jpg" alt="Anime">
					Anime
				</a>
			</div>
			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('ninjaanime', 'ninjaanime')">
					<img src="/pages/img/themes/ninjaanime.jpg" alt="Ninja Anime">
					Ninja Anime
				</a>
			</div>
			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('spacecitizen', 'spacecitizen')">
					<img src="/pages/img/themes/spacecitizen.jpg" alt="Space Citizens">
					Space Citizens
				</a>
			</div>
			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('chibi', 'chibi')">
					<img src="/pages/img/themes/chibi.jpg" alt="Chibi Peepz">
					Chibi Peepz
				</a>
			</div>
			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('ninja', 'ninja')">
					<img src="/pages/img/themes/ninja.jpg" alt="Chibi Ninjas">
					Chibi Ninjas
				</a>
			</div>
			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('animal', 'cc2')">
					<img src="/pages/img/themes/animal.jpg" alt="Lil' Petz World">
					Lil' Petz World
				</a>
			</div>
			<div class="theme" data-has-cc="">
				<a href="#" onclick="redirect('space', 'cc2')">
					<img src="/pages/img/themes/space.jpg" alt="Space Peepz">
					Space Peepz
				</a>
			</div>
							<div class="theme">
					<a href="#" onclick="redirect('fullenergy')">
						<img src="/pages/img/themes/fullenergy.png" alt="Full Energy">
						<div>Full Energy</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('politic')">
						<img src="/pages/img/themes/politic.png" alt="Politics &amp; Celebrity">
						<div>Politics &amp; Celebrity</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('christmas')">
						<img src="/pages/img/themes/christmas.png" alt="Holiday &amp; Seasonal">
						<div>Holiday &amp; Seasonal</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('monstermsh')">
						<img src="/pages/img/themes/monstermsh.png" alt="Monsters Mayhem">
						<div>Monsters Mayhem</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('akon')">
						<img src="/pages/img/themes/akon.jpg" alt="AKON™">
						AKON™
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('ben10')">
						<img src="/pages/img/themes/ben10.png" alt="Ben 10™">
						Ben 10™
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('bunny')">
						<img src="/pages/img/themes/bunny.png" alt="It's Happy Bunny™">
						<div>It's Happy Bunny™</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('chowder')">
						<img src="/pages/img/themes/chowder.png" alt="Chowder™">
						<div>Chowder™</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('domo')">
						<img src="/pages/img/themes/domo.png" alt="Domo™">
						<div>Domo™</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('monkeytalk')">
						<img src="/pages/img/themes/monkeytalk.png" alt="SuperRica &amp; Rashy™">
						<div>SuperRica &amp; Rashy™</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('sf')">
						<img src="/pages/img/themes/sf.png" alt="Street Fighter™">
						<div>Street Fighter™</div>
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('startrek')">
						<img src="/pages/img/themes/startrek.jpg" alt="Star Trek™ Quogs">
						<div>Star Trek™ Quogs</div>
					</a>
				</div>
				<div class="theme" data-has-cc="">
					<a href="#" onclick="redirect('toonadv', 'cctoonadventure')">
						<img src="/pages/img/themes/toonadv.png" alt="Toon Adventure™">
						Toon Adventure™
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('underdog')">
						<img src="/pages/img/themes/underdog.png" alt="Underdog™">
						Underdog™
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('willie')">
						<img src="/pages/img/themes/willie.jpg" alt="Willie Nelson™">
						Willie Nelson™
					</a>
				</div>
				<div class="theme">
					<a href="#" onclick="redirect('street')">
						<img src="/pages/img/themes/street.png" alt="Street">
						Street
					</a>
				</div>
						<div id="char-copy" style="display: none;">
				<h2>Copy a character</h2>
				<p>Have a character ID? Use it here!</p>
				<input type="text" value="832304" name="char-id">
				<a href="#" onclick="copyRedirect()">Copy</a>
			</div>
		</main>

		<footer>
	<nav id="foot-left">
		<a href="javascript:;" onclick="checkForUpdates()">v0.0.3</a>
		<a href="/settings">Settings</a>
		
		<a href="https://discord.gg/XEVcSMcDva">Discord</a>
	</nav>

	<nav id="foot-right"></nav>
</footer>	

	<script>
		const charId = $("input[name='char-id']");

		// filter the list
		const params = new URLSearchParams(window.location.search);
		// default to all themes
		const filter = params.get("filter") || "vl";
		if (filter == "cc") {
			$(".theme").not("[data-has-cc]").hide();
		} else {
			$("#char-copy").hide();
		}

		function redirect(tId, ccId = false) {
			if (filter == "cc") {
				window.location.href = `./cc_browser?themeId=${ccId}`;
				return;
			}
			window.location.href = `./go_full?tray=${tId}`;
		}
		function copyRedirect() {
			const id = charId.val();
			window.location.href = `./cc?original_asset_id=${id}`;
		}

	</script>


</body></html>
